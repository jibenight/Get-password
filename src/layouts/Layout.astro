---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import AdsInFeed from '../components/AdsInFeed.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  title: string;
}
const { title } = Astro.props;
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={t('meta.content')} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Header/>
    <AdsInFeed/>
    <slot/>
    <AdsInFeed/>
    <Footer/>
  </body>

  <!-- Combined Dark Mode Management Script -->
  <script is:inline>
    (function() {
      // Retrieve the saved theme from localStorage or fallback to the system preference
      const savedTheme = localStorage.getItem('theme');
      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)');

      /**
       * Applies the given theme by toggling the "dark-mode" class on the document element.
       * Also updates the localStorage and the state of the toggle button icons (if available).
       * @param {string} theme - Either 'dark' or 'light'
       */
      function applyTheme(theme) {
        const isDark = theme === 'dark';
        document.documentElement.classList.toggle('dark-mode', isDark);
        localStorage.setItem('theme', theme);

        // Update toggle button icons if the element exists
        const toggleButton = document.querySelector('.dark-mode-toggle');
        if (toggleButton) {
          const moonIcon = toggleButton.querySelector('.moon-icon');
          const sunIcon = toggleButton.querySelector('.sun-icon');
          if (moonIcon && sunIcon) {
            moonIcon.style.display = isDark ? 'none' : 'inline';
            sunIcon.style.display = isDark ? 'inline' : 'none';
          }
        }
      }

      // Initialize the theme on page load
      applyTheme(savedTheme || (prefersDarkMode.matches ? 'dark' : 'light'));

      // Listen for changes in the system's dark mode preference
      prefersDarkMode.addEventListener('change', e => {
        applyTheme(e.matches ? 'dark' : 'light');
      });

      // Expose a global function to toggle the theme
      window.toggleTheme = () => {
        const currentTheme = document.documentElement.classList.contains('dark-mode')
          ? 'dark'
          : 'light';
        applyTheme(currentTheme === 'dark' ? 'light' : 'dark');
      };

      // Once the DOM is fully loaded, attach a click listener to the toggle button (if present)
      document.addEventListener('DOMContentLoaded', () => {
        const toggleButton = document.querySelector('.dark-mode-toggle');
        if (toggleButton) {
          toggleButton.addEventListener('click', () => {
            const currentTheme = document.documentElement.classList.contains('dark-mode')
              ? 'dark'
              : 'light';
            applyTheme(currentTheme === 'dark' ? 'light' : 'dark');
          });
        }
      });
    })();
  </script>

  <style is:global>
    :root {
      --color-bg-primary: #f5f5f5;
      --color-bg-secondary: #ffffff;
      --color-text-primary: #1a1a1a;
      --color-text-secondary: #3d3d3d;
      --color-accent: #3a6ea5;
      --color-accent-hover: #2a4e7c;
      --color-border-color: #e0e0e0;
      --color-bg-navbar: rgba(237, 237, 237, 0.7);

      /* Shadows */
      --shadow-soft: 0 4px 6px rgba(0, 0, 0, 0.1);
      --shadow-hover: 0 6px 12px rgba(0, 0, 0, 0.2);

      font-size: 16px;
    }

    /* Reduce font size on smaller screens */
    @media (max-width: 768px) {
      :root {
        font-size: 15px;
      }
    }

    :root.dark-mode {
      --color-bg-primary: #0d0d0d;
      --color-bg-secondary: #1a1a1a;
      --color-text-primary: #eaeaea;
      --color-text-secondary: #bfbfbf;
      --color-accent: #3a6ea5;
      --color-accent-hover: #507bb5;
      --color-bg-navbar: rgba(50, 50, 50, 0.9);
    }

    /* Reset default margins and paddings */
    *, *::before, *::after {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* Custom font-face declaration */
    @font-face {
      font-family: 'Varela';
      src: url('/fonts/VarelaRound-Regular.ttf');
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }

    html {
      font-family: 'Varela', Arial, sans-serif;
      background: var(--color-bg-primary);
      color: var(--color-text-primary);
      font-size: 16px;
      overflow-y: scroll;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    body {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      background: url('../assets/images/y-so-white.png') repeat;
      color: var(--color-text-primary);
      line-height: 1.65;
      transition: background-color 0.3s, color 0.3s;
      /* Removed invalid 'font-weight' property */
    }

    footer {
      background-color: var(--color-bg-dark);
      color: var(--color-text-secondary);
      padding: 2rem;
      text-align: center;
    }

    h1, h2, h3, h4, h5, h6 {
      color: var(--color-text-primary);
      margin-bottom: 1rem;
      font-family: 'Varela', 'Open Sans', sans-serif;
      line-height: 1.2;
    }

    h1, h2 {
      text-align: center;
    }

    p, li {
      color: var(--color-text-primary);
      font-size: 1.15rem;
    }

    h1 {
      font-weight: 700;
      margin-top: 0;
      font-size: 2.5rem;
    }

    h2 {
      font-size: 2.44rem;
    }

    h3 {
      font-size: 1.95rem;
    }

    h4 {
      font-size: 1.56rem;
    }

    h5 {
      font-size: 1.25rem;
    }

    .text-caption {
      font-size: 0.8rem;
    }

    small {
      font-size: 0.64rem;
    }

    button {
      background-color: var(--color-accent);
      color: #ffffff;
      font-size: larger;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      box-shadow: var(--shadow-soft);
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-hover);
    }

    .card {
      background-color: var(--color-bg-secondary);
      border-radius: 12px;
      box-shadow: var(--shadow-soft);
      padding: 1.5rem;
      transition: box-shadow 0.3s ease;
    }

    .card:hover {
      box-shadow: var(--shadow-hover);
    }

    input, select {
      border: 1px solid var(--color-border-color);
      border-radius: 6px;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      width: 100%;
      background-color: var(--color-bg-secondary);
      color: var(--color-text-primary);
    }

    input:focus, select:focus {
      border-color: var(--color-accent);
      outline: none;
      box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);
    }

    .checkbox-options {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .checkbox-options input[type="checkbox"] {
      appearance: none;
      width: 20px;
      height: 20px;
      border: 2px solid var(--color-accent);
      border-radius: 4px;
      background-color: var(--color-bg-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.3s ease, border-color 0.3s ease;
    }

    .checkbox-options input[type="checkbox"]:checked {
      background-color: var(--color-accent);
      border-color: var(--color-accent);
    }

    .checkbox-options input[type="checkbox"]:checked::before {
      content: 'âœ”';
      color: white;
      font-size: 0.9rem;
    }

    .checkbox-options label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--color-text-primary);
      cursor: pointer;
    }

    .dark-mode body {
      background: url('../assets/images/y-so-dark.png') repeat;
      color: var(--color-text-primary);
    }

    .dark-mode .card {
      background-color: var(--color-bg-secondary);
      color: var(--color-text-primary);
    }

    .dark-mode input, .dark-mode select {
      background-color: var(--color-bg-secondary);
      color: var(--color-text-primary);
      border-color: var(--color-border-color);
    }

    .dark-mode input:focus, .dark-mode select:focus {
      border-color: var(--color-accent);
      box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);
    }
  </style>
</html>
