---
import { Image } from 'astro:assets';
// Import assets
import moon from '../assets/images/moon.svg';
import sun from '../assets/images/sun.svg';
import logo from '../assets/images/logo.svg';

// Import components and utilities
import LanguagePicker from '../components/LanguagePicker.astro';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

// Get the language from the URL and load the corresponding translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Destructure the pathname from Astro.url and determine if the current page is the homepage
const { pathname } = Astro.url;
const isHomepage =
  pathname === `/${lang}/` || pathname === `/${lang}` || pathname === `/`;
---

<!-- Header component containing the navigation -->
<header>
  <nav>
    <!-- Container for logo and hamburger menu -->
    <div class="menu-container">
      <!-- Logo linking to the homepage -->
      <div class="logo">
        <a href={`/${lang === 'en' ? 'en' : lang}/`}>
          <Image src={logo} alt="logo gray locker" />
        </a>
      </div>

      <!-- Hamburger button for mobile navigation -->
      <button class="hamburger" aria-label="Open menu">
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </button>
    </div>

    <!-- Navigation links displayed only on the homepage -->
    <div class="nav-links" id="navLinks">
      {isHomepage && (
        <>
          <button class="toggle-button classic" data-type="classic">
            {t('nav.regular')}
          </button>
          <button class="toggle-button memorable" data-type="memorable">
            {t('nav.memory')}
          </button>
          <LanguagePicker />
        </>
      )}

      <!-- Dark mode toggle button -->
      <div class="dark-mode-toggle" aria-label="Toggle dark mode">
        <span class="moon-icon">
          <Image src={moon} alt="Moon icon" />
        </span>
        <span class="sun-icon">
          <Image src={sun} alt="Sun icon" />
        </span>
      </div>
    </div>
  </nav>
</header>

<style>
  /* Header styles */
  header {
    position: sticky;
    top: 20px;
    background: none;
    z-index: 1000;
    width: 100%;
    max-width: 1024px;
    margin: 0 auto;
    justify-content: center;
  }

  /* Logo container styles */
  .logo {
    display: grid;
    place-items: center;
    line-height: 0;
  }

  /* Logo image dimensions */
  .logo img {
    width: 50px;
    height: 50px;
  }

  /* Navigation bar styles */
  nav {
    background-color: var(--color-bg-navbar);
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    border-radius: 12px;
  }

  /* Menu container styles */
  .menu-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  /* Hamburger button styles (hidden on desktop) */
  .hamburger {
    display: none;
    justify-content: center;
    align-items: center;
    background: none;
    border: none;
    cursor: pointer;
    width: 40px;
    height: 40px;
    position: relative;
  }

  /* Hamburger lines styling */
  .hamburger .line {
    position: absolute;
    width: 25px;
    height: 3px;
    background-color: var(--color-text-primary);
    border-radius: 4px;
    transition: all 0.3s ease-in-out;
  }

  /* Position each line in the hamburger button */
  .hamburger .line:nth-child(1) {
    top: 10px;
  }

  .hamburger .line:nth-child(2) {
    top: 18px;
  }

  .hamburger .line:nth-child(3) {
    top: 26px;
  }

  /* Animate hamburger lines when menu is open */
  .hamburger.open .line:nth-child(1) {
    transform: rotate(45deg);
    top: 18px;
  }

  .hamburger.open .line:nth-child(2) {
    opacity: 0;
  }

  .hamburger.open .line:nth-child(3) {
    transform: rotate(-45deg);
    top: 18px;
  }

  /* Navigation links container styles */
  .nav-links {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    justify-content: flex-end;
    flex: 1;
  }

  /* Button styles within navigation */
  .nav-links button {
    padding: 0.5rem 1rem;
  }

  /* Dark mode toggle styles */
  .dark-mode-toggle {
    display: flex;
    align-items: center;
    cursor: pointer;
    margin-top: 8px;
  }

  /* Dark mode icon sizes */
  .dark-mode-toggle .moon-icon img,
  .dark-mode-toggle .sun-icon img {
    width: 30px;
  }

  /* Desktop responsive styles */
  @media (min-width: 769px) {
    .menu-container {
      width: auto;
      margin-right: auto;
    }

    .nav-links {
      display: flex;
      flex-direction: row;
      gap: 1.5rem;
    }
  }

  /* Mobile responsive styles */
  @media (max-width: 768px) {
    header {
      padding-left: 10px;
      padding-right: 10px;
    }

    .hamburger {
      display: flex;
      box-shadow: none;
    }

    .nav-links {
      display: none;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      width: 100%;
      margin-top: 1rem;
    }

    .nav-links.open {
      display: flex;
    }

    .logo img {
      width: 35px;
      height: 35px;
    }
  }
</style>

<script>
  // Wait for the DOM content to load before attaching event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const hamburger = document.querySelector('.hamburger');
    const navLinks = document.querySelector('.nav-links');

    // Toggle the 'open' class on hamburger and navLinks when the hamburger is clicked
    if (hamburger && navLinks) {
      hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('open');
        navLinks.classList.toggle('open');
      });
    }
  });
</script>
