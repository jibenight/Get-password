---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class='container'>
  <h2>{t('memorable.title')}</h2>

  <div class='password-display'>
    <div id='memorablePasswordList' class='password-list'></div>

    <div class='options'>
      <div class='count-option'>
        <label for='memorablePasswordCount'>
          {t('memorable.count')} : <span id='memorableCountValue'>1</span>
        </label>
        <input
          type='range'
          id='memorablePasswordCount'
          min='1'
          max='10'
          value='1'
        />
      </div>

      <div class='word-option'>
        <label for='numberWordCount'>
          {t('memorable.number')} : <span id='numberWordValue'>4</span>
        </label>
        <input type='range' id='numberWordCount' min='1' max='10' value='4' />
      </div>

      <div class='checkbox-options'>
        <label>
          <input type='checkbox' id='includeNumbers' checked />
          {t('memorable.options.numbers')}
        </label>
        <label>
          <input type='checkbox' id='includeSymbols' checked />
          {t('memorable.options.symbols')}
        </label>
      </div>
    </div>
  </div>

  <div class='strength-meter'>
    <label>{t('password.strength')}</label>
    <div id='strengthMeters'>
      <div class='bars'></div>
      <div class='bars'></div>
      <div class='bars'></div>
      <div class='bars'></div>
    </div>
  </div>

  <button id='generateMemorableButton' class='generate-button'>
    {t('memorable.generate')}
  </button>
</div>

<style>
  .container {
    max-width: 1024px;
    margin: 2rem auto;
    padding: 2rem;
    background: var(--color-bg-secondary);
    border-radius: 12px;
    box-shadow: var(--shadow-soft);
    transition:
      box-shadow 0.3s ease,
      transform 0.2s ease;
  }

  .container:hover {
    box-shadow: var(--shadow-hover);
    transform: translateY(-2px);
  }

  h2 {
    text-align: center;
    margin-bottom: 2rem;
    color: var(--color-text-primary);
    font-size: 1.8rem;
    font-weight: bold;
  }

  .password-display {
    margin-bottom: 2rem;
  }

  .password-list {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    margin-bottom: 1.5rem;
    color: var(--color-text-secondary);
  }

  .options {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .count-option,
  .phrase-type-option {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  input[type='range'] {
    width: 100%;
    margin: 0.5rem 0;
    background-color: var(--color-bg-dark);
    border-radius: 4px;
    accent-color: var(--color-accent);
  }

  .phrase-type-option label {
    font-weight: bold;
    color: var(--color-text-primary);
    margin-bottom: 0.5rem;
  }

  select {
    width: 100%;
    padding: 0.7rem;
    border: 2px solid var(--color-border-color);
    border-radius: 6px;
    background-color: var(--color-bg-secondary);
    font-size: 1rem;
    color: var(--color-text-primary);
    cursor: pointer;
    transition:
      border-color 0.3s,
      box-shadow 0.3s;
    position: relative;
  }

  select:hover {
    border-color: var(--color-accent-hover);
  }

  select:focus {
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);
    outline: none;
  }

  .checkbox-options {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-options label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-text-primary);
    cursor: pointer;
    font-size: 1rem;
  }

  .checkbox-options input[type='checkbox'] {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-accent);
    border-radius: 4px;
    background-color: var(--color-bg-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition:
      background-color 0.3s ease,
      border-color 0.3s ease;
  }

  .checkbox-options input[type='checkbox']:checked {
    background-color: var(--color-accent);
    border-color: var(--color-accent);
  }

  .checkbox-options input[type='checkbox']:checked::before {
    content: 'âœ”';
    color: white;
    font-size: 0.9rem;
  }

  #strengthMeters {
    margin: 1.5rem 0;
  }

  #strengthMeters {
    display: flex;
    gap: 5px;
  }

  .bars {
    width: 25%;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: 5px;
  }

  .bars.weak {
    background-color: red;
  }

  .bars.medium {
    background-color: orange;
  }

  .bars.strong {
    background-color: yellowgreen;
  }

  .bars.very-strong {
    background-color: green;
  }

  .generate-button {
    width: 100%;
    padding: 1rem;
  }

  .info-box {
    margin-top: 2rem;
    padding: 1.5rem;
    background: var(--color-bg-primary);
    border-radius: 8px;
    border-left: 4px solid var(--color-accent);
    color: var(--color-text-secondary);
  }

  .info-box h3 {
    color: var(--color-text-primary);
    margin-bottom: 1rem;
  }

  .info-box p {
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .info-box ul {
    padding-left: 1.5rem;
    margin-bottom: 1rem;
  }

  .info-box li {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 480px) {
    .container {
      padding: 1.5rem;
    }

    h2 {
      font-size: 1.5rem;
    }

    .info-box {
      padding: 1rem;
    }
  }
</style>

<script>
  import('../scripts/memorablePasswordGenerator.js')
    .then(module => {
      const lang = document.documentElement.lang || 'en';
      module.initMemorablePasswordGenerator(lang);
    })
    .catch(error => {
      console.error(error)
    });
</script>
